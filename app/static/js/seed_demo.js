function runSeedDemo() {
    const btn = document.getElementById('seedDemoBtn');
    const status = document.getElementById('seedStatus');
    const pipeline = document.getElementById('seedPipeline');

    // –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    const rawData = document.getElementById('raw_data');
    const chaoticData = document.getElementById('chaotic_data');
    const caData = document.getElementById('ca_data');
    const hashData = document.getElementById('hash_data');
    const finalData = document.getElementById('final_data');

    // –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏–π
    const chaoticExp = document.getElementById('chaotic_exp');
    const caExp = document.getElementById('ca_exp');
    const hashExp = document.getElementById('hash_exp');
    const finalExp = document.getElementById('final_exp');

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    [rawData, chaoticData, caData, hashData, finalData].forEach(el => el.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ...');
    status.className = "status mt-3 text-warning fw-bold";

    btn.disabled = true;
    status.textContent = "–ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ–π–µ—Ä–∞...";
    pipeline.style.display = 'block';

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    async function updateStage(dataElement, textContent) {
        await new Promise(resolve => setTimeout(resolve, 500));
        dataElement.textContent = textContent;
    }

    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
    // const progressSteps = 5;
    // let currentStep = 0;

    try {
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –µ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç /demo/generate
        // –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:
        // {
        //   raw_entropy_sample: "...",
        //   after_chaotic: "...",
        //   after_ca: "...",
        //   after_hash: "...",
        //   final_seed: "...",
        //   explanations: { chaotic: "...", ca: "...", hash: "...", hkdf: "..." }
        // }
        const res = await fetch('/demo/generate');
        if (!res.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${res.statusText}`);
        }
        const data = await res.json();

        // 1. –°—ã—Ä–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è
        status.textContent = "1/5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–∏...";
        await updateStage(rawData, data.raw_entropy_sample);

        // 2. Chaotic Map
        status.textContent = "2/5: –û–±—Ä–∞–±–æ—Ç–∫–∞ Chaotic Map (Logistic)...";
        chaoticExp.textContent = data.explanations.chaotic;
        await updateStage(chaoticData, data.after_chaotic);

        // 3. Cellular Automaton
        status.textContent = "3/5: –û–±—Ä–∞–±–æ—Ç–∫–∞ Cellular Automaton (Rule 30)...";
        caExp.textContent = data.explanations.ca;
        await updateStage(caData, data.after_ca);

        // 4. SHA3-256 Whitening
        status.textContent = "4/5: –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ (SHA3-256)...";
        hashExp.textContent = data.explanations.hash;
        await updateStage(hashData, data.after_hash);

        // 5. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–µ–º—è (HKDF)
        status.textContent = "5/5: –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–º–µ–Ω–∏ (HKDF)...";
        finalExp.textContent = data.explanations.hkdf;
        await updateStage(finalData, data.final_seed);
        finalData.className = "data-display text-success fw-bold"; // –í—ã–¥–µ–ª–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        status.textContent = "–ö–æ–Ω–≤–µ–π–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ";
        status.className = "status mt-3 text-success fw-bold";

    } catch (e) {
        status.textContent = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω–≤–µ–π–µ—Ä–∞: ${e.message}`;
        status.className = "status mt-3 text-danger fw-bold";
        console.error("Seed Demo Error:", e);
    } finally {
        btn.disabled = false;
    }
}